<?php
/**
 * PrebookResponseData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Nuitee
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Lite API
 *
 * The **Lite API** can be used to to do the following  Get room rates & availability for a set of hotels Select a specific hotel with room availability and make a booking Manage the bookings - retrieve and cancel existing bookings Get static content for hotels, search hotels by destination
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Nuitee\Model;

use \ArrayAccess;
use \Nuitee\ObjectSerializer;

/**
 * PrebookResponseData Class Doc Comment
 *
 * @category Class
 * @package  Nuitee
 * @implements \ArrayAccess<string, mixed>
 */
class PrebookResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrebookResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'board_changed' => 'bool',
        'cancellation_changed' => 'bool',
        'currency' => 'string',
        'hotel_id' => 'string',
        'prebook_id' => 'string',
        'price' => 'float',
        'price_difference_percent' => 'float',
        'room_types' => '\Nuitee\Model\PrebookResponseDataRoomTypesInner[]',
        'terms_and_conditions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'board_changed' => null,
        'cancellation_changed' => null,
        'currency' => null,
        'hotel_id' => null,
        'prebook_id' => null,
        'price' => null,
        'price_difference_percent' => null,
        'room_types' => null,
        'terms_and_conditions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'board_changed' => false,
		'cancellation_changed' => false,
		'currency' => false,
		'hotel_id' => false,
		'prebook_id' => false,
		'price' => false,
		'price_difference_percent' => false,
		'room_types' => false,
		'terms_and_conditions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'board_changed' => 'boardChanged',
        'cancellation_changed' => 'cancellationChanged',
        'currency' => 'currency',
        'hotel_id' => 'hotelId',
        'prebook_id' => 'prebookId',
        'price' => 'price',
        'price_difference_percent' => 'priceDifferencePercent',
        'room_types' => 'roomTypes',
        'terms_and_conditions' => 'termsAndConditions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'board_changed' => 'setBoardChanged',
        'cancellation_changed' => 'setCancellationChanged',
        'currency' => 'setCurrency',
        'hotel_id' => 'setHotelId',
        'prebook_id' => 'setPrebookId',
        'price' => 'setPrice',
        'price_difference_percent' => 'setPriceDifferencePercent',
        'room_types' => 'setRoomTypes',
        'terms_and_conditions' => 'setTermsAndConditions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'board_changed' => 'getBoardChanged',
        'cancellation_changed' => 'getCancellationChanged',
        'currency' => 'getCurrency',
        'hotel_id' => 'getHotelId',
        'prebook_id' => 'getPrebookId',
        'price' => 'getPrice',
        'price_difference_percent' => 'getPriceDifferencePercent',
        'room_types' => 'getRoomTypes',
        'terms_and_conditions' => 'getTermsAndConditions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('board_changed', $data ?? [], null);
        $this->setIfExists('cancellation_changed', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('hotel_id', $data ?? [], null);
        $this->setIfExists('prebook_id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_difference_percent', $data ?? [], null);
        $this->setIfExists('room_types', $data ?? [], null);
        $this->setIfExists('terms_and_conditions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets board_changed
     *
     * @return bool|null
     */
    public function getBoardChanged()
    {
        return $this->container['board_changed'];
    }

    /**
     * Sets board_changed
     *
     * @param bool|null $board_changed board_changed
     *
     * @return self
     */
    public function setBoardChanged($board_changed)
    {

        if (is_null($board_changed)) {
            throw new \InvalidArgumentException('non-nullable board_changed cannot be null');
        }

        $this->container['board_changed'] = $board_changed;

        return $this;
    }

    /**
     * Gets cancellation_changed
     *
     * @return bool|null
     */
    public function getCancellationChanged()
    {
        return $this->container['cancellation_changed'];
    }

    /**
     * Sets cancellation_changed
     *
     * @param bool|null $cancellation_changed cancellation_changed
     *
     * @return self
     */
    public function setCancellationChanged($cancellation_changed)
    {

        if (is_null($cancellation_changed)) {
            throw new \InvalidArgumentException('non-nullable cancellation_changed cannot be null');
        }

        $this->container['cancellation_changed'] = $cancellation_changed;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets hotel_id
     *
     * @return string|null
     */
    public function getHotelId()
    {
        return $this->container['hotel_id'];
    }

    /**
     * Sets hotel_id
     *
     * @param string|null $hotel_id hotel_id
     *
     * @return self
     */
    public function setHotelId($hotel_id)
    {

        if (is_null($hotel_id)) {
            throw new \InvalidArgumentException('non-nullable hotel_id cannot be null');
        }

        $this->container['hotel_id'] = $hotel_id;

        return $this;
    }

    /**
     * Gets prebook_id
     *
     * @return string|null
     */
    public function getPrebookId()
    {
        return $this->container['prebook_id'];
    }

    /**
     * Sets prebook_id
     *
     * @param string|null $prebook_id prebook_id
     *
     * @return self
     */
    public function setPrebookId($prebook_id)
    {

        if (is_null($prebook_id)) {
            throw new \InvalidArgumentException('non-nullable prebook_id cannot be null');
        }

        $this->container['prebook_id'] = $prebook_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_difference_percent
     *
     * @return float|null
     */
    public function getPriceDifferencePercent()
    {
        return $this->container['price_difference_percent'];
    }

    /**
     * Sets price_difference_percent
     *
     * @param float|null $price_difference_percent price_difference_percent
     *
     * @return self
     */
    public function setPriceDifferencePercent($price_difference_percent)
    {

        if (is_null($price_difference_percent)) {
            throw new \InvalidArgumentException('non-nullable price_difference_percent cannot be null');
        }

        $this->container['price_difference_percent'] = $price_difference_percent;

        return $this;
    }

    /**
     * Gets room_types
     *
     * @return \Nuitee\Model\PrebookResponseDataRoomTypesInner[]|null
     */
    public function getRoomTypes()
    {
        return $this->container['room_types'];
    }

    /**
     * Sets room_types
     *
     * @param \Nuitee\Model\PrebookResponseDataRoomTypesInner[]|null $room_types room_types
     *
     * @return self
     */
    public function setRoomTypes($room_types)
    {

        if (is_null($room_types)) {
            throw new \InvalidArgumentException('non-nullable room_types cannot be null');
        }

        $this->container['room_types'] = $room_types;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string|null
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string|null $terms_and_conditions terms_and_conditions
     *
     * @return self
     */
    public function setTermsAndConditions($terms_and_conditions)
    {

        if (is_null($terms_and_conditions)) {
            throw new \InvalidArgumentException('non-nullable terms_and_conditions cannot be null');
        }

        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


